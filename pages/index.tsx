import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import useSWR, { useSWRConfig } from 'swr'
import { useState } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { apiURL, MusicObj, SituationObj, axiosBase } from '../unify/const'

const Home: NextPage = ()=> {
  const fetcher = async (address: string) => {
    const res = await fetch(address);
    
    // もしステータスコードが 200-299 の範囲内では無い場合はエラーページに遷移する
    if (!res.ok) {
      router.push("/_error");
    }
    return res.json();
  }

  const router = useRouter();
  const { mutate } = useSWRConfig();
  const { data, error } = useSWR(apiURL, fetcher)
  const [ name, setName ] = useState('');
  const [ artist, setArtist ] = useState('');
  const [ reason, setReason ] = useState('');
  const [ situation, setSituation ] = useState('1');

  // 登録機能
  const sendRegister = ()=> {
    axiosBase.post(`/register?situation=${situation}&name=${name}&artist=${artist}&reason=${reason}`)
    .then((ret)=> {
      console.log("----------------------" + JSON.stringify(ret))
      setName("");
      setReason("");
      setArtist("");
      // SWRがrefetchを行う
      mutate(apiURL);
    })
    // Go側でエラーがあった場合
    .catch(()=> {
      console.log("err")
      router.push("/_error");
    });
  };

  let musics;
  // console.log("----------------------" + data)
  if(data){
  // console.log("typeof----------------------" +typeof data)
  // console.log("Mst_situation length----------------------" + data.Mst_situation.length)
  //   console.log("----------------------" + JSON.stringify(data))
    if(JSON.parse(data.Music).length){
      const music = JSON.parse(data.Music);
      musics = music.map((value: MusicObj, key: number)=> {
        let detalPath = `/detal/?id=${value.ID}`;
        // keyはユニークIDとして付与している
        return <ul key={key}>
          <h1>{value.ID}番</h1>
          <p>シチュエーション</p>
          <li>{value.Mst_situationName}</li>
          <p>曲名</p>
          <li>{value.Name}</li>
          <p>歌手名</p>
          <li>{value.Artist}</li>
          <p>おすすめポイント</p>
          <li>{value.Reason}</li>
          <Link href={detalPath}>
            <a>詳細</a>
          </Link>
        </ul>
      })
    }
  }
  let situations;
  if(data){
  // console.log("typeof----------------------" +typeof data)
  // console.log("Mst_situation length----------------------" + data.Mst_situation.length)
    console.log("Mst_situation----------------------" + data.Mst_situation)
    if(JSON.parse(data.Mst_situation).length){
      const situation = JSON.parse(data.Mst_situation);
      situations = situation.map((value: SituationObj, key: number)=> {
        // keyはユニークIDとして付与している
        // console.log("----------------------" + JSON.stringify(value))
        return <option value={value.ID} key={key}>{value.Name}</option>
      })
    }
  }
  console.log("---------------------------------------  " + situation)
  return (
    <div className={styles.container}>
      <Head>
        <title>オンレコ</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <main className={styles.main}>
      <h1>投稿フォーム</h1>
      <label>シチュエーション</label><br></br>
        {situations ?

          <div>
        <select onChange={(e) => setSituation(e.target.value)}>

            {situations}
        </select>
          </div>
        :
          <p></p>
        }
        <label>曲名</label><br></br>
        <input type="text" name="name" value={name} onChange={(e) => setName(e.target.value)}/><br></br>
        <label>歌手名</label><br></br>
        <input type="text" name="content" value={artist} onChange={(e) => setArtist(e.target.value)}/><br></br>
        <label>おすすめポイント</label><br></br>
        <input type="text" name="content" value={reason} onChange={(e) => setReason(e.target.value)}/><br></br>
        <button type="submit" onClick={sendRegister}>送信</button><br></br>
        {data ? 
          <div>
            {musics}
          </div>
        :
          <p></p>
        }
      </main>
    </div>
  )
}

export default Home